lab01
EXPERIMENT-01
Setting Up and Basic Commands

git clone <url>
cd tab
git pull
git add .
git commit -m "vhv"
git push


lab02
EXPERIMENT-02
Creating and Managing Branches


git clone <url>
cd tab
git brach -c feature-branch
git checkout feature-branch
git branch

git add a.txt
git commit -m "vgvh"
git push origin feature-branch

git add b.txt
git commit -m "nkjkj"
git push origin feature-branch

git add c.txt
git checkout main
git merge feature-branch
git push origin main

git add c.txt
git stash save "vghgh"
git checkout main
git stash apply
git push origin main



EXPERIMENT-04
Git Tags and Releases
lab04
git clone <url>
cd tab
git add a.txt
git commit -m "vgvh"
git push origin main

git add b.txt
git commit -m "vgvh"
git push origin main

git tag v1.0
git tag
git push origin v1.0

git add c.txt
git commit -m "vgvh"
git push origin main

git checkout -b version v1.0
git push origin version



EXPERIMENT-05
Advanced Git Operations
lab05
git clone <url>
cd tab
git add .(a1 file)
git commit -m "vhgh"
git push origin main


git checkout -b source_branch

git add .(b1 file)
git commit -m "vhgh"
git push origin source_branch


git add .(c1 file)
git commit -m "vhgh"
git push origin source_branch

git checkout main
git branch
git cherry-pick source_branch~2..source_branch

git add .
git commit -m "final"
git push origin main
git log

lab6
git clone <url>
cd tab
git add .
git commit -m "vhgh"
git push 
repeat  5 times

git log
git show <commit id>

git log --author="Apekshakini" --since="2024-02-24" --until="2024-02-25"

git log -n 3

git revert <commit_id> -n


lab3
EXPERIMENT-03
Collaboration and Remote Repositories


git clone <url>
cd tab
git branch -c feature-branch
git push origin feature-branch

create one file in main branch and one file in feature-branch in github
git fetch
git rebase origin/feature-branch
git pull
git push origin main

git merge feature-branch -m "feature branch to main branch"
git push origin main



# def selection_sort(arr):
#     length=len(arr)
#     for i in range(length-1):
#         min_index=i
#         for j in range (i+1,length):
#             if arr[j]<arr[min_index]:
#                  min_index=j
#         arr[i],arr[min_index]=arr[min_index],arr[i]
#     return arr
# arr=[8,1,6,4,2]
# print("after sorting",selection_sort(arr))
# selection_sort(arr)


# def bubble_sort(arr):
#     length=len(arr)
#     for i in range(0,length-1):
#         for j in range(length-1):
#             if(arr[j]>arr[j+1]):
#                 temp=arr[j]
#                 arr[j]=arr[j+1]
#                 arr[j+1]=temp
#     return arr
# arr=[5,1, 6 ,2 ,7]
# print("after sorting",bubble_sort(arr))
    
# def sequential_search(arr,n):
#     length=len(arr)
#     found=0
#     for i in range(0,length-1):
#         if arr[i]==n:
#             print("The element is found at",i)
#             found=1
#     if found!=1:
#             print("Element not found")
# arr=[5,1,7,2,6,3]
# n=int(input("Enter the number to search:"))
# sequential_search(arr,n)      
                
                
# number = int(input("Enter the integer number: "))  
  
# revs_number = 0  
  
# while (number > 0):  
#     remainder = number % 10  
#     revs_number = (revs_number * 10) + remainder  
#     number = number // 10  
  
# print("The reverse number isÂ :",revs_number)



# def insertion_sort(arr):
#     for i in range(1, len(arr)):
#         key = arr[i]
#         j = i - 1
#         while j >= 0 and key < arr[j]:
#             arr[j + 1] = arr[j]
#             j -= 1
#         arr[j + 1] = key


# arr = [12, 11, 13, 5, 6]
# insertion_sort(arr)
# print("Sorted array is:", arr)

def is_even(num):
    return num % 2 == 0

def is_odd(num):
    return num % 2 != 0

# Example Usage:
num = 17
if is_even(num):
    print(num, "is even")
else:
    print(num, "is odd")

def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] < x:
            low = mid + 1
        else:
            high = mid - 1
    return -1

# Example Usage:
arr = [2, 3, 4, 10, 40]
x = 10
result = binary_search(arr, x)
if result != -1:
    print("Element is present at index", result)
else:
    print("Element is not present in array")


def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Example Usage:
num = 11
if is_prime(num):
    print(num, "is a prime number")
else:
    print(num, "is not a prime number")

